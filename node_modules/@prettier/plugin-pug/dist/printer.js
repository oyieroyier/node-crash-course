"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PugPrinter = void 0;
const node_util_1 = require("node:util");
const prettier_1 = require("prettier");
const doctype_shortcut_registry_1 = require("./doctype-shortcut-registry");
const logger_1 = require("./logger");
const utils_1 = require("./options/attribute-sorting/utils");
const utils_2 = require("./options/empty-attributes/utils");
const pug_attribute_separator_1 = require("./options/pug-attribute-separator");
const pug_comment_preserve_spaces_1 = require("./options/pug-comment-preserve-spaces");
const angular_1 = require("./utils/angular");
const common_1 = require("./utils/common");
const script_mime_types_1 = require("./utils/script-mime-types");
const svelte_1 = require("./utils/svelte");
const vue_1 = require("./utils/vue");
class PugPrinter {
    content;
    tokens;
    options;
    result = '';
    currentIndex = -1;
    currentLineLength = 0;
    indentString;
    indentLevel = 0;
    framework = 'auto';
    quotes;
    otherQuotes;
    alwaysUseAttributeSeparator;
    neverUseAttributeSeparator;
    wrapAttributesPattern;
    codeInterpolationOptions;
    currentTagPosition = 0;
    possibleIdPosition = 0;
    possibleClassPosition = 0;
    previousAttributeRemapped = false;
    wrapAttributes = false;
    pipelessText = false;
    pipelessComment = false;
    currentlyInPugInterpolation = false;
    classLiteralToAttribute = [];
    classLiteralAfterAttributes = [];
    constructor(content, tokens, options) {
        this.content = content;
        this.tokens = tokens;
        this.options = options;
        this.indentString = options.pugUseTabs
            ? '\t'
            : ' '.repeat(options.pugTabWidth);
        if (options.pugSingleFileComponentIndentation) {
            this.indentLevel++;
        }
        this.framework =
            options.pugFramework !== 'auto'
                ? options.pugFramework
                : (0, common_1.detectFramework)();
        this.quotes = this.options.pugSingleQuote ? "'" : '"';
        this.otherQuotes = this.options.pugSingleQuote ? '"' : "'";
        const pugAttributeSeparator = (0, pug_attribute_separator_1.resolvePugAttributeSeparatorOption)(options.pugAttributeSeparator);
        this.alwaysUseAttributeSeparator = pugAttributeSeparator === 'always';
        this.neverUseAttributeSeparator = pugAttributeSeparator === 'none';
        const wrapAttributesPattern = options.pugWrapAttributesPattern;
        this.wrapAttributesPattern = wrapAttributesPattern
            ? new RegExp(wrapAttributesPattern)
            : null;
        this.codeInterpolationOptions = {
            semi: options.pugSemi ?? options.semi,
            singleQuote: options.pugSingleQuote ?? options.singleQuote,
            bracketSpacing: options.pugBracketSpacing ?? options.bracketSpacing,
            arrowParens: options.pugArrowParens ?? options.arrowParens,
            printWidth: 9000,
            endOfLine: 'lf',
            useTabs: options.pugUseTabs ?? options.useTabs,
            tabWidth: options.pugTabWidth ?? options.tabWidth,
            bracketSameLine: options.pugBracketSameLine ?? options.bracketSameLine,
        };
    }
    get computedIndent() {
        switch (this.previousToken?.type) {
            case 'newline':
            case 'outdent':
                return this.indentString.repeat(this.indentLevel);
            case 'indent':
                return this.indentString;
            case 'start-pug-interpolation':
                return '';
        }
        return this.options.pugSingleFileComponentIndentation
            ? this.indentString
            : '';
    }
    get previousToken() {
        return this.tokens[this.currentIndex - 1];
    }
    get nextToken() {
        return this.tokens[this.currentIndex + 1];
    }
    build() {
        if (logger_1.logger.isDebugEnabled()) {
            logger_1.logger.debug('[PugPrinter]:', JSON.stringify(this.tokens));
        }
        const results = [];
        if (this.tokens[0]?.type === 'text') {
            results.push('| ');
        }
        else if (this.tokens[0]?.type === 'eos') {
            return '';
        }
        let token = this.getNextToken();
        while (token) {
            logger_1.logger.debug('[PugPrinter]:', JSON.stringify(token));
            try {
                switch (token.type) {
                    case 'attribute':
                    case 'class':
                    case 'end-attributes':
                    case 'id':
                    case 'eos':
                        this.result = results.join('');
                        this[token.type](token);
                        results.length = 0;
                        results.push(this.result);
                        break;
                    case 'tag':
                    case 'start-attributes':
                    case 'interpolation':
                    case 'call':
                    case ':':
                        this.result = results.join('');
                    default: {
                        if (typeof this[token.type] !== 'function') {
                            throw new Error('Unhandled token: ' + JSON.stringify(token));
                        }
                        results.push(this[token.type](token));
                        break;
                    }
                }
            }
            catch (error) {
                throw new Error(error);
            }
            token = this.getNextToken();
        }
        return results.join('');
    }
    getNextToken() {
        this.currentIndex++;
        return this.tokens[this.currentIndex] ?? null;
    }
    quoteString(val) {
        return `${this.quotes}${val}${this.quotes}`;
    }
    checkTokenType(token, possibilities, invert = false) {
        return !!token && possibilities.includes(token.type) !== invert;
    }
    tokenNeedsSeparator(token) {
        return this.neverUseAttributeSeparator
            ? false
            : this.alwaysUseAttributeSeparator || /^(\(|\[|:).*/.test(token.name);
    }
    getUnformattedContentLines(firstToken, lastToken) {
        const { start } = firstToken.loc;
        const { end } = lastToken.loc;
        const lines = this.content.split(/\r\n|\n|\r/);
        const startLine = start.line - 1;
        const endLine = end.line - 1;
        const parts = [];
        const firstLine = lines[startLine];
        if (firstLine !== undefined) {
            parts.push(firstLine.slice(start.column - 1));
        }
        for (let lineNumber = startLine + 1; lineNumber < endLine; lineNumber++) {
            const line = lines[lineNumber];
            if (line !== undefined) {
                parts.push(line);
            }
        }
        const lastLine = lines[endLine];
        if (lastLine !== undefined) {
            parts.push(lastLine.slice(0, end.column - 1));
        }
        return parts;
    }
    replaceTagWithLiteralIfPossible(search, replace) {
        if (this.options.pugExplicitDiv) {
            return;
        }
        const currentTagEnd = Math.max(this.possibleIdPosition, this.possibleClassPosition);
        const tag = this.result.slice(this.currentTagPosition, currentTagEnd);
        const replaced = tag.replace(search, replace);
        if (replaced !== tag) {
            const prefix = this.result.slice(0, this.currentTagPosition);
            const suffix = this.result.slice(currentTagEnd);
            this.result = `${prefix}${replaced}${suffix}`;
            const diff = tag.length - replaced.length;
            this.possibleIdPosition -= diff;
            this.possibleClassPosition -= diff;
        }
    }
    frameworkFormat(code) {
        const options = {
            ...this.codeInterpolationOptions,
            singleQuote: this.options.singleQuote,
        };
        switch (this.framework) {
            case 'angular':
                options.parser = '__ng_interpolation';
                break;
            case 'svelte':
            case 'vue':
            default:
                options.parser = 'babel';
                options.semi = false;
        }
        let result = (0, prettier_1.format)(code, options);
        if (result[0] === ';') {
            result = result.slice(1);
        }
        return result;
    }
    formatText(text) {
        let result = '';
        while (text) {
            const start = text.indexOf('{{');
            if (start !== -1) {
                result += text.slice(0, start);
                text = text.slice(start + 2);
                const end = text.indexOf('}}');
                if (end !== -1) {
                    let code = text.slice(0, end);
                    try {
                        const dangerousQuoteCombination = (0, common_1.detectDangerousQuoteCombination)(code, this.quotes, this.otherQuotes, logger_1.logger);
                        if (dangerousQuoteCombination) {
                            logger_1.logger.warn('The following expression could not be formatted correctly. Please try to fix it yourself and if there is a problem, please open a bug issue:', code);
                            result += (0, common_1.handleBracketSpacing)(this.options.pugBracketSpacing, code);
                            text = text.slice(end + 2);
                            continue;
                        }
                        else {
                            code = this.frameworkFormat(code);
                        }
                    }
                    catch (error) {
                        if (typeof error === 'string') {
                            if (error.includes('Unexpected token Lexer Error')) {
                                if (!error.includes('Unexpected character [`]')) {
                                    logger_1.logger.debug('[PugPrinter:formatText]: Using fallback strategy');
                                }
                            }
                            else if (error.includes('Bindings cannot contain assignments')) {
                                logger_1.logger.warn('[PugPrinter:formatText]: Bindings should not contain assignments:', `code: \`${code.trim()}\``);
                            }
                            else if (error.includes("Unexpected token '('")) {
                                if (this.framework !== 'vue') {
                                    logger_1.logger.warn('[PugPrinter:formatText]: Found unexpected token `(`.', `code: \`${code.trim()}\``);
                                }
                            }
                            else if (error.includes('Missing expected `)`')) {
                                if (this.framework !== 'vue') {
                                    logger_1.logger.warn('[PugPrinter:formatText]: Missing expected `)`.', `code: \`${code.trim()}\``);
                                }
                            }
                            else if (error.includes('Missing expected `:`')) {
                                if (this.framework !== 'vue') {
                                    logger_1.logger.warn('[PugPrinter:formatText]: Missing expected `:`.', `code: \`${code.trim()}\``);
                                }
                            }
                            else {
                                logger_1.logger.warn('[PugPrinter:formatText]: ', error);
                            }
                        }
                        else {
                            logger_1.logger.warn('[PugPrinter:formatText]: ', error);
                        }
                        try {
                            code = (0, prettier_1.format)(code, {
                                parser: 'babel',
                                ...this.codeInterpolationOptions,
                                semi: false,
                            });
                            if (code[0] === ';') {
                                code = code.slice(1);
                            }
                        }
                        catch (error) {
                            logger_1.logger.warn(error);
                        }
                    }
                    code = (0, common_1.unwrapLineFeeds)(code);
                    result += (0, common_1.handleBracketSpacing)(this.options.pugBracketSpacing, code);
                    text = text.slice(end + 2);
                }
                else {
                    result += '{{';
                    result += text;
                    text = '';
                }
            }
            else {
                const start2 = text.indexOf('{');
                if (this.options.pugFramework === 'svelte' && start2 !== -1) {
                    result += text.slice(0, start2);
                    text = text.slice(start2 + 1);
                    const end2 = text.indexOf('}');
                    if (end2 !== -1) {
                        let code = text.slice(0, end2);
                        try {
                            const dangerousQuoteCombination = (0, common_1.detectDangerousQuoteCombination)(code, this.quotes, this.otherQuotes, logger_1.logger);
                            if (dangerousQuoteCombination) {
                                logger_1.logger.warn('The following expression could not be formatted correctly. Please try to fix it yourself and if there is a problem, please open a bug issue:', code);
                                result += (0, common_1.handleBracketSpacing)(this.options.pugBracketSpacing, code);
                                text = text.slice(end2 + 1);
                                continue;
                            }
                            else {
                                code = this.frameworkFormat(code);
                            }
                        }
                        catch (error) {
                            logger_1.logger.warn('[PugPrinter:formatText]: ', error);
                            try {
                                code = (0, prettier_1.format)(code, {
                                    parser: 'babel',
                                    ...this.codeInterpolationOptions,
                                    semi: false,
                                });
                                if (code[0] === ';') {
                                    code = code.slice(1);
                                }
                            }
                            catch (error) {
                                logger_1.logger.warn(error);
                            }
                        }
                        code = (0, common_1.unwrapLineFeeds)(code);
                        result += (0, common_1.handleBracketSpacing)(this.options.pugBracketSpacing, code, ['{', '}']);
                        text = text.slice(end2 + 1);
                    }
                    else {
                        result += '{';
                        result += text;
                        text = '';
                    }
                }
                else {
                    result += text;
                    text = '';
                }
            }
        }
        return result;
    }
    formatDelegatePrettier(val, parser, formatOptions = {}) {
        const { trimTrailingSemicolon = false, trimLeadingSemicolon = true } = formatOptions;
        val = val.trim();
        const options = { ...this.codeInterpolationOptions };
        const wasQuoted = (0, common_1.isQuoted)(val);
        if (wasQuoted) {
            options.singleQuote = !this.options.pugSingleQuote;
            val = val.slice(1, -1);
        }
        val = (0, prettier_1.format)(val, { parser, ...options });
        if (this.quotes === '"') {
            val = val.replace(/"/g, '\\"');
        }
        else {
            val = val.replace(/'/g, "\\'");
        }
        val = (0, common_1.unwrapLineFeeds)(val);
        if (trimTrailingSemicolon && val[val.length - 1] === ';') {
            val = val.slice(0, -1);
        }
        if (trimLeadingSemicolon && val[0] === ';') {
            val = val.slice(1);
        }
        return wasQuoted ? this.quoteString(val) : val;
    }
    formatStyleAttribute(val) {
        return this.formatDelegatePrettier(val, 'css', {
            trimTrailingSemicolon: true,
        });
    }
    formatVueEventBinding(val) {
        return this.formatDelegatePrettier(val, '__vue_event_binding', {
            trimTrailingSemicolon: true,
        });
    }
    formatVueExpression(val) {
        return this.formatDelegatePrettier(val, '__vue_expression');
    }
    formatAngularBinding(val) {
        return this.formatDelegatePrettier(val, '__ng_binding');
    }
    formatAngularAction(val) {
        return this.formatDelegatePrettier(val, '__ng_action');
    }
    formatAngularDirective(val) {
        return this.formatDelegatePrettier(val, '__ng_directive');
    }
    formatFrameworkInterpolation(val, parser, [opening, closing]) {
        val = val.slice(1, -1);
        val = val.slice(opening.length, -closing.length);
        val = val.trim();
        if (val.includes(`\\${this.otherQuotes}`)) {
            logger_1.logger.warn('The following expression could not be formatted correctly. Please try to fix it yourself and if there is a problem, please open a bug issue:', val);
        }
        else {
            const options = {
                ...this.codeInterpolationOptions,
                singleQuote: !this.options.pugSingleQuote,
            };
            try {
                val = (0, prettier_1.format)(val, { parser, ...options });
            }
            catch (error) {
                logger_1.logger.warn('The following expression could not be formatted correctly. Please try to fix it yourself and if there is a problem, please open a bug issue:', val);
            }
            val = (0, common_1.unwrapLineFeeds)(val);
        }
        val = (0, common_1.handleBracketSpacing)(this.options.pugBracketSpacing, val, [
            opening,
            closing,
        ]);
        return this.quoteString(val);
    }
    formatAngularInterpolation(val) {
        return this.formatFrameworkInterpolation(val, '__ng_interpolation', [
            '{{',
            '}}',
        ]);
    }
    formatSvelteInterpolation(val) {
        return this.formatFrameworkInterpolation(val, '__ng_interpolation', [
            '{',
            '}',
        ]);
    }
    tag(token) {
        let val = token.val;
        if (val === 'div' &&
            !this.options.pugExplicitDiv &&
            this.nextToken &&
            ((this.nextToken.type === 'class' &&
                this.options.pugClassLocation === 'before-attributes') ||
                this.nextToken.type === 'id')) {
            val = '';
        }
        this.currentLineLength += val.length;
        const result = `${this.computedIndent}${val}`;
        logger_1.logger.debug('tag', { result, val: token.val, length: token.val.length }, this.currentLineLength);
        this.currentTagPosition = this.result.length + this.computedIndent.length;
        this.possibleIdPosition = this.result.length + result.length;
        this.possibleClassPosition = this.result.length + result.length;
        return result;
    }
    ['start-attributes'](token) {
        let result = '';
        if (this.nextToken?.type === 'attribute') {
            this.previousAttributeRemapped = false;
            this.possibleClassPosition = this.result.length;
            result = '(';
            logger_1.logger.debug(this.currentLineLength);
            let tempToken = this.nextToken;
            let tempIndex = this.currentIndex + 1;
            let hasLiteralAttributes = false;
            let numNormalAttributes = 0;
            while (tempToken.type === 'attribute') {
                if (!this.currentlyInPugInterpolation &&
                    !this.wrapAttributes &&
                    this.wrapAttributesPattern?.test(tempToken.name)) {
                    this.wrapAttributes = true;
                }
                switch (tempToken.name) {
                    case 'class':
                    case 'id': {
                        hasLiteralAttributes = true;
                        const val = tempToken.val.toString();
                        if ((0, common_1.isQuoted)(val)) {
                            this.currentLineLength -= 2;
                        }
                        this.currentLineLength += 1 + val.length;
                        logger_1.logger.debug({
                            tokenName: tempToken.name,
                            length: tempToken.name.length,
                        }, this.currentLineLength);
                        break;
                    }
                    default: {
                        this.currentLineLength += tempToken.name.length;
                        if (numNormalAttributes > 0) {
                            this.currentLineLength += 1;
                            if (this.tokenNeedsSeparator(tempToken)) {
                                this.currentLineLength += 1;
                            }
                        }
                        logger_1.logger.debug({
                            tokenName: tempToken.name,
                            length: tempToken.name.length,
                        }, this.currentLineLength);
                        const val = tempToken.val.toString();
                        if (val.length > 0 && val !== 'true') {
                            this.currentLineLength += 1 + val.length;
                            logger_1.logger.debug({ tokenVal: val, length: val.length }, this.currentLineLength);
                        }
                        numNormalAttributes++;
                        break;
                    }
                }
                tempToken = this.tokens[++tempIndex];
            }
            logger_1.logger.debug('after token', this.currentLineLength);
            if (hasLiteralAttributes) {
                if (this.previousToken?.type === 'tag' &&
                    this.previousToken.val === 'div' &&
                    !this.options.pugExplicitDiv) {
                    this.currentLineLength -= 3;
                }
            }
            if (numNormalAttributes > 0) {
                this.currentLineLength += 2;
            }
            if (this.options.pugClassLocation === 'after-attributes') {
                let tempClassIndex = tempIndex;
                let tempClassToken = this.tokens[++tempClassIndex];
                while (tempClassToken.type === 'class') {
                    const val = tempClassToken.val.toString();
                    this.currentLineLength += 1 + val.length;
                    logger_1.logger.debug({ tokenVal: val, length: val.length }, this.currentLineLength);
                    tempClassToken = this.tokens[++tempClassIndex];
                }
            }
            logger_1.logger.debug('final line length', {
                currentLineLength: this.currentLineLength,
            });
            if (!this.currentlyInPugInterpolation &&
                !this.wrapAttributes &&
                (this.currentLineLength > this.options.pugPrintWidth ||
                    (this.options.pugWrapAttributesThreshold >= 0 &&
                        numNormalAttributes > this.options.pugWrapAttributesThreshold))) {
                this.wrapAttributes = true;
            }
            if (this.options.pugSortAttributes !== 'as-is' ||
                this.options.pugSortAttributesEnd.length > 0 ||
                this.options.pugSortAttributesBeginning.length > 0) {
                const startAttributesIndex = this.tokens.indexOf(token);
                const endAttributesIndex = tempIndex;
                if (endAttributesIndex - startAttributesIndex > 2) {
                    this.tokens = (0, utils_1.partialSort)(this.tokens, startAttributesIndex + 1, endAttributesIndex, (a, b) => (0, utils_1.compareAttributeToken)(a, b, this.options.pugSortAttributes, this.options.pugSortAttributesBeginning, this.options.pugSortAttributesEnd));
                }
            }
        }
        return result;
    }
    attribute(token) {
        (0, utils_2.formatEmptyAttribute)(token, this.options.pugEmptyAttributes, this.options.pugEmptyAttributesForceQuotes);
        if (typeof token.val === 'string') {
            if ((0, common_1.isQuoted)(token.val) && token.val[0] !== '`') {
                if (token.name === 'class' &&
                    this.options.pugClassNotation === 'literal') {
                    const val = token.val.slice(1, -1).trim();
                    const classes = val.split(/\s+/);
                    const specialClasses = [];
                    const normalClasses = [];
                    const validClassNameRegex = /^-?[_a-zA-Z]+[_a-zA-Z0-9-]*$/;
                    for (const className of classes) {
                        if (!validClassNameRegex.test(className)) {
                            specialClasses.push(className);
                        }
                        else {
                            if (this.options.pugClassLocation === 'after-attributes') {
                                this.classLiteralAfterAttributes.push(className);
                            }
                            else {
                                normalClasses.push(className);
                            }
                        }
                    }
                    if (normalClasses.length > 0) {
                        const position = this.possibleClassPosition;
                        this.result = [
                            this.result.slice(0, position),
                            '.',
                            normalClasses.join('.'),
                            this.result.slice(position),
                        ].join('');
                        this.possibleClassPosition += 1 + normalClasses.join('.').length;
                        if (this.options.pugClassLocation === 'before-attributes') {
                            this.replaceTagWithLiteralIfPossible(/div\./, '.');
                        }
                    }
                    if (specialClasses.length > 0) {
                        token.val = (0, common_1.makeString)(specialClasses.join(' '), this.quotes);
                        this.previousAttributeRemapped = false;
                    }
                    else {
                        this.previousAttributeRemapped = true;
                        return;
                    }
                }
                else if (token.name === 'id' &&
                    this.options.pugIdNotation !== 'as-is') {
                    let val = token.val;
                    val = val.slice(1, -1);
                    val = val.trim();
                    const validIdNameRegex = /^-?[_a-zA-Z]+[_a-zA-Z0-9-]*$/;
                    if (!validIdNameRegex.test(val)) {
                        val = (0, common_1.makeString)(val, this.quotes);
                        this.result += 'id';
                        if (token.mustEscape === false) {
                            this.result += '!';
                        }
                        this.result += `=${val}`;
                        return;
                    }
                    const position = this.possibleIdPosition;
                    const literal = `#${val}`;
                    this.result = [
                        this.result.slice(0, position),
                        literal,
                        this.result.slice(position),
                    ].join('');
                    this.possibleClassPosition += literal.length;
                    this.replaceTagWithLiteralIfPossible(/div#/, '#');
                    this.previousAttributeRemapped = true;
                    return;
                }
            }
        }
        const hasNormalPreviousToken = (0, common_1.previousNormalAttributeToken)(this.tokens, this.currentIndex);
        if (this.previousToken?.type === 'attribute' &&
            (!this.previousAttributeRemapped || hasNormalPreviousToken)) {
            if (this.tokenNeedsSeparator(token)) {
                this.result += ',';
            }
            if (!this.wrapAttributes) {
                this.result += ' ';
            }
        }
        this.previousAttributeRemapped = false;
        if (this.wrapAttributes) {
            this.result += '\n';
            this.result += this.indentString.repeat(this.indentLevel + 1);
        }
        this.result += `${token.name}`;
        if (typeof token.val === 'boolean') {
            if (token.val !== true) {
                this.result += `=${token.val}`;
            }
        }
        else if (token.name === 'class' &&
            this.options.pugClassNotation === 'attribute') {
            const val = (0, common_1.isQuoted)(token.val)
                ? token.val.slice(1, -1).trim()
                : token.val;
            const classes = val.split(/\s+/);
            if (this.classLiteralToAttribute.length) {
                for (let i = this.classLiteralToAttribute.length - 1; i > -1; i--) {
                    const className = this.classLiteralToAttribute.splice(i, 1)[0];
                    if (className) {
                        classes.unshift(className);
                    }
                }
            }
            this.result += `=${(0, common_1.isQuoted)(token.val)
                ? this.quoteString(classes.join(' '))
                : classes.join(' ')}`;
        }
        else {
            let val = token.val;
            if ((0, common_1.isMultilineInterpolation)(val)) {
            }
            else if ((0, common_1.isSingleLineWithInterpolation)(val)) {
            }
            else if ((0, vue_1.isVueVForWithOf)(token.name, val)) {
                val = this.formatDelegatePrettier(val, 'vue');
            }
            else if ((0, vue_1.isVueExpression)(token.name)) {
                val = this.formatVueExpression(val);
            }
            else if ((0, vue_1.isVueEventBinding)(token.name)) {
                val = this.formatVueEventBinding(val);
            }
            else if (this.framework === 'vue' && (0, vue_1.isVueVDirective)(token.name)) {
                val = this.formatVueExpression(val);
            }
            else if ((0, vue_1.isVueVBindExpression)(token.name)) {
                val = this.formatDelegatePrettier(val, '__js_expression');
            }
            else if ((0, vue_1.isVueVOnExpression)(token.name)) {
                val = this.formatDelegatePrettier(val, '__js_expression');
            }
            else if ((0, angular_1.isAngularBinding)(token.name)) {
                val = this.formatAngularBinding(val);
            }
            else if ((0, angular_1.isAngularAction)(token.name)) {
                val = this.formatAngularAction(val);
            }
            else if ((0, angular_1.isAngularDirective)(token.name)) {
                val = this.formatAngularDirective(val);
            }
            else if ((0, angular_1.isAngularInterpolation)(val)) {
                val = this.formatAngularInterpolation(val);
            }
            else if ((0, svelte_1.isSvelteInterpolation)(val)) {
                val = this.formatSvelteInterpolation(val);
            }
            else if ((0, common_1.isStyleAttribute)(token.name, token.val)) {
                val = this.formatStyleAttribute(val);
            }
            else {
                const rightTrimmedVal = val.trimEnd();
                if ((0, common_1.isQuoted)(rightTrimmedVal)) {
                    val = (0, common_1.makeString)(rightTrimmedVal.slice(1, -1), this.quotes);
                }
                else if (val === 'true') {
                    return;
                }
                else if (token.mustEscape) {
                    val = (0, prettier_1.format)(val, {
                        parser: '__js_expression',
                        ...this.codeInterpolationOptions,
                    });
                    const lines = val.split('\n');
                    const codeIndentLevel = this.wrapAttributes
                        ? this.indentLevel + 1
                        : this.indentLevel;
                    if (lines.length > 1) {
                        val = lines[0] ?? '';
                        for (let index = 1; index < lines.length; index++) {
                            val += '\n';
                            val += this.indentString.repeat(codeIndentLevel);
                            val += lines[index];
                        }
                    }
                }
                else {
                    val = val.trim();
                    val = val.replace(/\s\s+/g, ' ');
                    if (val[0] === '{' && val[1] === ' ') {
                        val = `{${val.slice(2, val.length)}`;
                    }
                }
            }
            if (token.mustEscape === false) {
                this.result += '!';
            }
            this.result += `=${val}`;
        }
    }
    ['end-attributes'](token) {
        if (this.wrapAttributes && this.result[this.result.length - 1] !== '(') {
            if (!this.options.pugBracketSameLine) {
                this.result += '\n';
            }
            this.result += this.indentString.repeat(this.indentLevel);
        }
        this.wrapAttributes = false;
        if (this.classLiteralToAttribute.length) {
            if (this.previousToken?.type === 'start-attributes') {
                this.result += '(';
            }
            else if (this.previousToken?.type === 'attribute') {
                this.result += ' ';
            }
            const classes = this.classLiteralToAttribute.splice(0, this.classLiteralToAttribute.length);
            this.result += `class=${this.quoteString(classes.join(' '))}`;
            if (this.previousToken?.type === 'start-attributes') {
                this.result += ')';
            }
        }
        if (this.result[this.result.length - 1] === '(') {
            this.result = this.result.slice(0, -1);
        }
        else if (this.previousToken?.type === 'attribute') {
            if (this.options.pugBracketSameLine) {
                this.result = this.result.trimEnd();
            }
            this.result += ')';
        }
        else if (this.options.pugPreserveAttributeBrackets &&
            this.previousToken?.type === 'start-attributes') {
            this.result += '()';
        }
        if (this.result[this.result.length - 1] === ')' &&
            this.classLiteralAfterAttributes.length > 0) {
            const classes = this.classLiteralAfterAttributes.splice(0, this.classLiteralAfterAttributes.length);
            this.result += `.${classes.join('.')}`;
        }
        if (this.options.pugClassLocation === 'after-attributes') {
            this.possibleClassPosition = this.result.length;
        }
        if (this.nextToken?.type === 'text' || this.nextToken?.type === 'path') {
            this.result += ' ';
        }
    }
    indent(token) {
        const result = `\n${this.indentString.repeat(this.indentLevel)}`;
        this.indentLevel++;
        this.currentLineLength = result.length - 1 + 1 + this.options.pugTabWidth;
        logger_1.logger.debug('indent', {
            result,
            indentLevel: this.indentLevel,
            pugTabWidth: this.options.pugTabWidth,
        }, this.currentLineLength);
        return result;
    }
    outdent(token) {
        let result = '';
        if (this.previousToken && this.previousToken.type !== 'outdent') {
            if (token.loc.start.line - this.previousToken.loc.end.line > 1) {
                result += '\n';
            }
            result += '\n';
        }
        this.indentLevel--;
        this.currentLineLength =
            1 + this.indentString.repeat(this.indentLevel).length;
        logger_1.logger.debug('outdent', { result, indentLevel: this.indentLevel }, this.currentLineLength);
        return result;
    }
    class(token) {
        if (this.options.pugClassNotation === 'attribute') {
            this.classLiteralToAttribute.push(token.val);
            if (this.previousToken?.type !== 'tag' &&
                this.previousToken?.type !== 'class') {
                this.result += `${this.computedIndent}div`;
            }
            if (this.nextToken &&
                ['text', 'newline', 'indent', 'outdent', 'eos'].includes(this.nextToken.type)) {
                const classes = this.classLiteralToAttribute.splice(0, this.classLiteralToAttribute.length);
                this.result += `(class=${this.quoteString(classes.join(' '))})`;
                if (this.nextToken.type === 'text') {
                    this.result += ' ';
                }
            }
        }
        else {
            const val = `.${token.val}`;
            this.currentLineLength += val.length;
            logger_1.logger.debug('before class', {
                result: this.result,
                val,
                length: val.length,
                previousToken: this.previousToken,
            }, this.currentLineLength);
            switch (this.previousToken?.type) {
                case undefined:
                case 'newline':
                case 'outdent':
                case 'indent': {
                    const optionalDiv = this.options.pugExplicitDiv ||
                        this.options.pugClassLocation === 'after-attributes'
                        ? 'div'
                        : '';
                    let result = `${this.computedIndent}${optionalDiv}`;
                    if (this.options.pugClassLocation === 'after-attributes') {
                        this.classLiteralAfterAttributes.push(val.slice(1));
                    }
                    else {
                        result += val;
                    }
                    this.currentLineLength += optionalDiv.length;
                    this.possibleIdPosition =
                        this.result.length +
                            this.computedIndent.length +
                            optionalDiv.length;
                    this.result += result;
                    this.possibleClassPosition = this.result.length;
                    break;
                }
                case 'end-attributes': {
                    const prefix = this.result.slice(0, this.possibleClassPosition);
                    this.result = [
                        prefix,
                        val,
                        this.result.slice(this.possibleClassPosition),
                    ].join('');
                    this.possibleClassPosition += val.length;
                    break;
                }
                default: {
                    if (this.options.pugClassLocation === 'after-attributes') {
                        this.classLiteralAfterAttributes.push(val.slice(1));
                    }
                    else {
                        const prefix = this.result.slice(0, this.possibleClassPosition);
                        this.result = [
                            prefix,
                            val,
                            this.result.slice(this.possibleClassPosition),
                        ].join('');
                        this.possibleClassPosition += val.length;
                    }
                    break;
                }
            }
            if (this.options.pugClassLocation === 'after-attributes' &&
                this.classLiteralAfterAttributes.length > 0) {
                let result = this.result.slice(0, this.possibleClassPosition);
                if ([
                    'text',
                    'newline',
                    'indent',
                    'outdent',
                    'eos',
                    'code',
                    ':',
                    undefined,
                ].includes(this.nextToken?.type)) {
                    const classes = this.classLiteralAfterAttributes.splice(0, this.classLiteralAfterAttributes.length);
                    result += '.' + classes.join('.');
                }
                this.result = [
                    result,
                    this.result.slice(this.possibleClassPosition),
                ].join('');
                this.possibleClassPosition = this.result.length;
                this.replaceTagWithLiteralIfPossible(/div\./, '.');
            }
            logger_1.logger.debug('after class', { result: this.result, val, length: val.length }, this.currentLineLength);
            if (this.nextToken?.type === 'text' &&
                !/^\s+$/.test(this.nextToken.val)) {
                this.currentLineLength += 1;
                this.result += ' ';
            }
        }
    }
    eos(token) {
        while (this.result[this.result.length - 1] === '\n') {
            this.result = this.result.slice(0, -1);
        }
        this.result += '\n';
    }
    comment(commentToken) {
        let result = this.computedIndent;
        if (/^ prettier-ignore($|[: ])/.test(commentToken.val)) {
            let token = this.getNextToken();
            if (token) {
                let skipNewline = token.type === 'newline';
                let ignoreLevel = 0;
                while (token) {
                    const { type } = token;
                    if (type === 'newline' && ignoreLevel === 0) {
                        if (skipNewline) {
                            skipNewline = false;
                        }
                        else {
                            break;
                        }
                    }
                    else if (type === 'indent') {
                        ignoreLevel++;
                    }
                    else if (type === 'outdent') {
                        ignoreLevel--;
                        if (ignoreLevel <= 0) {
                            if (ignoreLevel < 0) {
                                this.indentLevel--;
                            }
                            break;
                        }
                    }
                    else if (type === 'eos') {
                        break;
                    }
                    token = this.getNextToken();
                }
                if (token) {
                    const lines = this.getUnformattedContentLines(commentToken, token);
                    const lastLine = lines.pop();
                    if (lastLine !== undefined) {
                        lines.push(lastLine.trimEnd());
                    }
                    result += lines.join('\n');
                    if (token.type === 'eos') {
                        result += '\n';
                    }
                }
            }
        }
        else {
            if (this.checkTokenType(this.previousToken, ['newline', 'indent', 'outdent'], true)) {
                result += ' ';
            }
            result += '//';
            if (!commentToken.buffer) {
                result += '-';
            }
            result += (0, pug_comment_preserve_spaces_1.formatPugCommentPreserveSpaces)(commentToken.val, this.options.pugCommentPreserveSpaces);
            if (this.nextToken?.type === 'start-pipeless-text') {
                this.pipelessComment = true;
            }
        }
        return result;
    }
    newline(token) {
        let result = '';
        if (this.previousToken &&
            token.loc.start.line - this.previousToken.loc.end.line > 1) {
            result += '\n';
        }
        result += '\n';
        this.currentLineLength =
            1 + this.indentString.repeat(this.indentLevel).length;
        logger_1.logger.debug('newline', { result, indentLevel: this.indentLevel }, this.currentLineLength);
        return result;
    }
    text(token) {
        let result = '';
        let val = token.val;
        let needsTrailingWhitespace = false;
        let endsWithWhitespace = val[val.length - 1] === ' ' && !/^\s+$/.test(val);
        if (this.pipelessText) {
            switch (this.previousToken?.type) {
                case 'newline':
                    if (val.trim().length > 0) {
                        result += this.indentString.repeat(this.indentLevel + 1);
                    }
                    break;
                case 'start-pipeless-text':
                    result += this.indentString;
                    break;
            }
            if (this.pipelessComment) {
                val = (0, pug_comment_preserve_spaces_1.formatPugCommentPreserveSpaces)(val, this.options.pugCommentPreserveSpaces, true);
            }
        }
        else {
            if (this.nextToken && endsWithWhitespace) {
                switch (this.nextToken.type) {
                    case 'interpolated-code':
                    case 'start-pug-interpolation':
                        needsTrailingWhitespace = true;
                        break;
                }
            }
            val = val.replace(/\s\s+/g, ' ');
            switch (this.previousToken?.type) {
                case 'newline':
                    result += this.indentString.repeat(this.indentLevel);
                    if (/^ .+$/.test(val)) {
                        result += '|\n';
                        result += this.indentString.repeat(this.indentLevel);
                    }
                    result += '|';
                    if (/.*\S.*/.test(token.val) ||
                        this.nextToken?.type === 'start-pug-interpolation') {
                        result += ' ';
                    }
                    break;
                case 'indent':
                case 'outdent':
                    result += this.computedIndent;
                    if (/^ .+$/.test(val)) {
                        result += '|\n';
                        result += this.indentString.repeat(this.indentLevel);
                    }
                    result += '|';
                    if (/.*\S.*/.test(token.val)) {
                        result += ' ';
                    }
                    break;
                case 'interpolated-code':
                case 'end-pug-interpolation':
                    if (/^ .+$/.test(val)) {
                        result += ' ';
                    }
                    break;
            }
            val = val.trim();
            val = this.formatText(val);
            val = val.replace(/#(\{|\[)/g, '\\#$1');
        }
        if (this.checkTokenType(this.previousToken, [
            'tag',
            'id',
            'interpolation',
            'call',
            '&attributes',
            'filter',
        ])) {
            if (val.length === 0 && this.nextToken?.type === 'indent') {
                endsWithWhitespace = false;
            }
            else {
                val = ` ${val}`;
            }
        }
        result += val;
        if (needsTrailingWhitespace) {
            result += ' ';
        }
        if (endsWithWhitespace && this.nextToken?.type === 'indent') {
            result += '\n' + this.indentString.repeat(this.indentLevel + 1) + '|';
        }
        return result;
    }
    ['interpolated-code'](token) {
        let result = '';
        switch (this.previousToken?.type) {
            case 'tag':
            case 'class':
            case 'id':
            case 'end-attributes':
                result = ' ';
                break;
            case 'start-pug-interpolation':
                result = '| ';
                break;
            case 'indent':
            case 'newline':
            case 'outdent':
                result = this.computedIndent;
                result += this.pipelessText ? this.indentString : '| ';
                break;
        }
        result += token.mustEscape ? '#' : '!';
        result += (0, common_1.handleBracketSpacing)(this.options.pugBracketSpacing, token.val.trim(), ['{', '}']);
        return result;
    }
    code(token) {
        let result = this.computedIndent;
        if (!token.mustEscape && token.buffer) {
            result += '!';
        }
        result += token.buffer ? '=' : '-';
        let useSemi = this.options.pugSemi;
        if (useSemi && (token.mustEscape || token.buffer)) {
            useSemi = false;
        }
        let val = token.val;
        try {
            const valBackup = val;
            val = (0, prettier_1.format)(val, {
                parser: 'babel',
                ...this.codeInterpolationOptions,
                semi: useSemi,
                endOfLine: 'lf',
            });
            val = val.slice(0, -1);
            if (val[0] === ';') {
                val = val.slice(1);
            }
            if (val.includes('\n')) {
                val = valBackup;
            }
        }
        catch (error) {
            logger_1.logger.warn('[PugPrinter]:', error);
        }
        result += ` ${val}`;
        return result;
    }
    id(token) {
        const val = `#${token.val}`;
        this.currentLineLength += val.length;
        switch (this.previousToken?.type) {
            case undefined:
            case 'newline':
            case 'outdent':
            case 'indent': {
                const optionalDiv = this.options.pugExplicitDiv ? 'div' : '';
                const result = `${this.computedIndent}${optionalDiv}${val}`;
                this.currentLineLength += optionalDiv.length;
                this.result += result;
                this.possibleClassPosition = this.result.length;
                break;
            }
            default: {
                const prefix = this.result.slice(0, this.possibleIdPosition);
                this.possibleClassPosition += val.length;
                this.result = [
                    prefix,
                    val,
                    this.result.slice(this.possibleIdPosition),
                ].join('');
                break;
            }
        }
    }
    ['start-pipeless-text'](token) {
        this.pipelessText = true;
        let result = `\n${this.indentString.repeat(this.indentLevel)}`;
        if (this.previousToken?.type === 'dot') {
            const lastTagToken = (0, common_1.previousTagToken)(this.tokens, this.currentIndex);
            let parser;
            switch (lastTagToken?.val) {
                case 'script':
                    parser = (0, script_mime_types_1.getScriptParserName)((0, common_1.previousTypeAttributeToken)(this.tokens, this.currentIndex));
                    break;
                case 'style':
                    parser = 'css';
                    break;
                default:
                    break;
            }
            if (parser) {
                let index = this.currentIndex + 1;
                let tok = this.tokens[index];
                let rawText = '';
                let usedInterpolatedCode = false;
                while (tok && tok?.type !== 'end-pipeless-text') {
                    switch (tok.type) {
                        case 'text':
                            rawText += tok.val;
                            break;
                        case 'newline':
                            rawText += '\n';
                            break;
                        case 'interpolated-code':
                            usedInterpolatedCode = true;
                            rawText += tok.mustEscape ? '#' : '!';
                            rawText += `{${tok.val}}`;
                            break;
                        default:
                            logger_1.logger.warn('[PugPrinter:start-pipeless-text]:', 'Unhandled token for pipeless script tag:', JSON.stringify(tok));
                            break;
                    }
                    index++;
                    tok = this.tokens[index];
                }
                try {
                    result = (0, prettier_1.format)(rawText, {
                        parser,
                        ...this.codeInterpolationOptions,
                    });
                }
                catch (error) {
                    if (!usedInterpolatedCode) {
                        logger_1.logger.error(error);
                        throw error;
                    }
                    const warningContext = [
                        '[PugPrinter:start-pipeless-text]:',
                        'The following expression could not be formatted correctly.',
                        'This is likely a syntax error or an issue caused by the missing execution context.',
                        'If you think this is a bug, please open a bug issue.',
                    ];
                    warningContext.push(`\ncode: \`${rawText.trim()}\``);
                    warningContext.push('\nYou used interpolated code in your pipeless script tag, so you may ignore this warning.');
                    if (node_util_1.types.isNativeError(error)) {
                        warningContext.push(`\nFound ${parser} ${error.name}: ${error.message}.`);
                    }
                    else {
                        logger_1.logger.debug('typeof error:', typeof error);
                        warningContext.push(`\nUnexpected error for parser ${parser}.`, error);
                    }
                    logger_1.logger.warn(...warningContext);
                    result = rawText;
                }
                result = result.trimEnd();
                const indentString = this.indentString.repeat(this.indentLevel + 1);
                result = result
                    .split('\n')
                    .map((line) => (line ? indentString + line : ''))
                    .join('\n');
                result = `\n${result}`;
                tok = this.tokens[index - 1];
                if (tok?.type === 'text' && tok.val === '') {
                    result += '\n';
                }
                this.currentIndex = index - 1;
            }
        }
        return result;
    }
    ['end-pipeless-text'](token) {
        this.pipelessText = false;
        this.pipelessComment = false;
        return '';
    }
    doctype(token) {
        let result = `${this.computedIndent}doctype`;
        if (token.val) {
            result += ` ${token.val}`;
        }
        return result;
    }
    dot(token) {
        return '.';
    }
    block(token) {
        let result = `${this.computedIndent}block `;
        if (token.mode !== 'replace') {
            result += `${token.mode} `;
        }
        result += token.val;
        return result;
    }
    extends(token) {
        const indent = this.options.pugSingleFileComponentIndentation
            ? this.indentString
            : '';
        return `${indent}extends `;
    }
    path(token) {
        let result = '';
        if (this.checkTokenType(this.previousToken, ['include', 'filter'])) {
            result += ' ';
        }
        result += token.val;
        return result;
    }
    ['start-pug-interpolation'](token) {
        let result = '';
        if (this.tokens[this.currentIndex - 2]?.type === 'newline' &&
            this.previousToken?.type === 'text' &&
            this.previousToken.val.trim().length === 0) {
            result += this.indentString.repeat(this.indentLevel + 1);
        }
        this.currentlyInPugInterpolation = true;
        result += '#[';
        return result;
    }
    ['end-pug-interpolation'](token) {
        this.currentlyInPugInterpolation = false;
        return ']';
    }
    interpolation(token) {
        const result = `${this.computedIndent}#{${token.val}}`;
        this.currentLineLength += result.length;
        this.possibleIdPosition = this.result.length + result.length;
        this.possibleClassPosition = this.result.length + result.length;
        return result;
    }
    include(token) {
        return `${this.computedIndent}include`;
    }
    filter(token) {
        return `${this.computedIndent}:${token.val}`;
    }
    call(token) {
        let result = `${this.computedIndent}+${token.val}`;
        let args = token.args;
        if (args) {
            args = args.trim();
            args = args.replace(/\s\s+/g, ' ');
            result += `(${args})`;
        }
        this.currentLineLength += result.length;
        this.possibleIdPosition = this.result.length + result.length;
        this.possibleClassPosition = this.result.length + result.length;
        return result;
    }
    mixin(token) {
        let result = `${this.computedIndent}mixin ${token.val}`;
        let args = token.args;
        if (args) {
            args = args.trim();
            args = args.replace(/\s\s+/g, ' ');
            result += `(${args})`;
        }
        return result;
    }
    if(token) {
        let result = this.computedIndent;
        const match = /^!\((.*)\)$/.exec(token.val);
        logger_1.logger.debug('[PugPrinter]:', match);
        result += !match ? `if ${token.val}` : `unless ${match[1]}`;
        return result;
    }
    ['mixin-block'](token) {
        return `${this.computedIndent}block`;
    }
    else(token) {
        return `${this.computedIndent}else`;
    }
    ['&attributes'](token) {
        const result = `&attributes(${token.val})`;
        this.currentLineLength += result.length;
        return result;
    }
    ['text-html'](token) {
        const match = /^<(.*?)>(.*)<\/(.*?)>$/.exec(token.val);
        logger_1.logger.debug('[PugPrinter]:', match);
        if (match) {
            return `${this.computedIndent}${match[1]} ${match[2]}`;
        }
        const entry = Object.entries(doctype_shortcut_registry_1.DOCTYPE_SHORTCUT_REGISTRY).find(([key]) => key === token.val.toLowerCase());
        if (entry) {
            return `${this.computedIndent}${entry[1]}`;
        }
        return `${this.computedIndent}${token.val}`;
    }
    each(token) {
        let result = `${this.computedIndent}each ${token.val}`;
        if (token.key !== null) {
            result += `, ${token.key}`;
        }
        result += ` in ${token.code}`;
        return result;
    }
    eachOf(token) {
        let value = token.value.trim();
        value = (0, prettier_1.format)(value, {
            parser: 'babel',
            ...this.codeInterpolationOptions,
            semi: false,
        });
        if (value[0] === ';') {
            value = value.slice(1);
        }
        value = (0, common_1.unwrapLineFeeds)(value);
        const code = token.code.trim();
        return `${this.computedIndent}each ${value} of ${code}`;
    }
    while(token) {
        return `${this.computedIndent}while ${token.val}`;
    }
    case(token) {
        return `${this.computedIndent}case ${token.val}`;
    }
    when(token) {
        return `${this.computedIndent}when ${token.val}`;
    }
    [':'](token) {
        this.possibleIdPosition = this.result.length + 2;
        this.possibleClassPosition = this.result.length + 2;
        return ': ';
    }
    default(token) {
        return `${this.computedIndent}default`;
    }
    ['else-if'](token) {
        return `${this.computedIndent}else if ${token.val}`;
    }
    blockcode(token) {
        return `${this.computedIndent}-`;
    }
    yield(token) {
        return `${this.computedIndent}yield`;
    }
    slash(token) {
        let result = '/';
        if (this.nextToken?.type === 'text') {
            result += ' ';
        }
        return result;
    }
}
exports.PugPrinter = PugPrinter;
//# sourceMappingURL=data:application/json;base64,