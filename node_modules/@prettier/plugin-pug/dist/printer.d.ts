import type { Token } from 'pug-lexer';
import type { PugSortAttributes } from './options/attribute-sorting';
import type { ArrowParens } from './options/common';
import type { PugEmptyAttributes, PugEmptyAttributesForceQuotes } from './options/empty-attributes';
import type { PugAttributeSeparator } from './options/pug-attribute-separator';
import type { PugClassLocation } from './options/pug-class-location';
import type { PugClassNotation } from './options/pug-class-notation';
import type { PugCommentPreserveSpaces } from './options/pug-comment-preserve-spaces';
import type { PugFramework } from './options/pug-framework';
import type { PugIdNotation } from './options/pug-id-notation';
export interface PugPrinterOptions {
    readonly printWidth: number;
    readonly pugPrintWidth: number;
    readonly singleQuote: boolean;
    readonly pugSingleQuote: boolean;
    readonly tabWidth: number;
    readonly pugTabWidth: number;
    readonly useTabs: boolean;
    readonly pugUseTabs: boolean;
    readonly bracketSpacing: boolean;
    readonly pugBracketSpacing: boolean;
    readonly arrowParens: ArrowParens;
    readonly pugArrowParens: ArrowParens;
    readonly semi: boolean;
    readonly pugSemi: boolean;
    readonly bracketSameLine: boolean;
    readonly pugBracketSameLine: boolean;
    readonly pugAttributeSeparator: PugAttributeSeparator;
    readonly pugCommentPreserveSpaces: PugCommentPreserveSpaces;
    readonly pugSortAttributes: PugSortAttributes;
    readonly pugSortAttributesBeginning: string[];
    readonly pugSortAttributesEnd: string[];
    readonly pugWrapAttributesThreshold: number;
    readonly pugWrapAttributesPattern: string;
    readonly pugClassNotation: PugClassNotation;
    readonly pugClassLocation: PugClassLocation;
    readonly pugIdNotation: PugIdNotation;
    readonly pugEmptyAttributes: PugEmptyAttributes;
    readonly pugEmptyAttributesForceQuotes: PugEmptyAttributesForceQuotes;
    readonly pugSingleFileComponentIndentation: boolean;
    readonly pugFramework: PugFramework;
    readonly pugExplicitDiv: boolean;
    readonly pugPreserveAttributeBrackets: boolean;
}
export declare class PugPrinter {
    private readonly content;
    private tokens;
    private readonly options;
    private result;
    private currentIndex;
    private currentLineLength;
    private readonly indentString;
    private indentLevel;
    private readonly framework;
    private readonly quotes;
    private readonly otherQuotes;
    private readonly alwaysUseAttributeSeparator;
    private readonly neverUseAttributeSeparator;
    private readonly wrapAttributesPattern;
    private readonly codeInterpolationOptions;
    private currentTagPosition;
    private possibleIdPosition;
    private possibleClassPosition;
    private previousAttributeRemapped;
    private wrapAttributes;
    private pipelessText;
    private pipelessComment;
    private currentlyInPugInterpolation;
    private readonly classLiteralToAttribute;
    private readonly classLiteralAfterAttributes;
    constructor(content: string, tokens: Token[], options: PugPrinterOptions);
    private get computedIndent();
    private get previousToken();
    private get nextToken();
    build(): string;
    private getNextToken;
    private quoteString;
    private checkTokenType;
    private tokenNeedsSeparator;
    private getUnformattedContentLines;
    private replaceTagWithLiteralIfPossible;
    private frameworkFormat;
    private formatText;
    private formatDelegatePrettier;
    private formatStyleAttribute;
    private formatVueEventBinding;
    private formatVueExpression;
    private formatAngularBinding;
    private formatAngularAction;
    private formatAngularDirective;
    private formatFrameworkInterpolation;
    private formatAngularInterpolation;
    private formatSvelteInterpolation;
    private tag;
    private ['start-attributes'];
    private attribute;
    private ['end-attributes'];
    private indent;
    private outdent;
    private class;
    private eos;
    private comment;
    private newline;
    private text;
    private ['interpolated-code'];
    private code;
    private id;
    private ['start-pipeless-text'];
    private ['end-pipeless-text'];
    private doctype;
    private dot;
    private block;
    private extends;
    private path;
    private ['start-pug-interpolation'];
    private ['end-pug-interpolation'];
    private interpolation;
    private include;
    private filter;
    private call;
    private mixin;
    private if;
    private ['mixin-block'];
    private else;
    private ['&attributes'];
    private ['text-html'];
    private each;
    private eachOf;
    private while;
    private case;
    private when;
    private [':'];
    private default;
    private ['else-if'];
    private blockcode;
    private yield;
    private slash;
}
