export declare enum LogLevel {
    DEBUG = "debug",
    LOG = "log",
    INFO = "info",
    WARN = "warn",
    ERROR = "error",
    OFF = "off"
}
export type ILogger = Pick<typeof console, 'debug' | 'log' | 'info' | 'warn' | 'error'>;
export declare class Logger implements ILogger {
    private readonly logger;
    private level;
    constructor(logger?: ILogger, level?: LogLevel);
    static isSupportedLogLevel(value: any): value is LogLevel;
    setLogLevel(level: LogLevel): void;
    isDebugEnabled(): boolean;
    debug(message?: unknown, ...optionalParams: any[]): void;
    log(message?: unknown, ...optionalParams: any[]): void;
    info(message?: unknown, ...optionalParams: any[]): void;
    warn(message?: unknown, ...optionalParams: any[]): void;
    error(message?: unknown, ...optionalParams: any[]): void;
    private message;
}
export declare function createLogger(logger?: ILogger): Logger;
export declare const logger: Logger;
